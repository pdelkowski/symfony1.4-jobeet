<?php

/**
 * PluginJobeetJob
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginJobeetJob extends BaseJobeetJob
{
	public function save(Doctrine_Connection $conn = null)
	{
		if($this->isNew() && !$this->getExpiresAt())
		{
			$now = $this->getCreatedAt() ? $this->getDateTimeObject('created_at')->format('U') : time();
			// $this->setExpiresAt(date('Y:m:d H:i:s'), $now + 86400 * sfConfig::get('app_active_days'));
			$this->setExpiresAt(date('Y:m:d H:i:s', $now + 86400 * sfConfig::get('app_active_days')));
		}

		if (!$this->getToken())
		{
			$this->setToken(sha1($this->getEmail().rand(11111, 99999)));
		}

		return parent::save($conn);
	}

	public function publish()
	{
	  $this->setIsActivated(true);
	  $this->save();
	}

	public function extend($force = false)
	{
		if (!$force && !$this->expiresSoon())
		{
		  return false;
		}

		$this->setExpiresAt(date('Y-m-d', time() + 86400 * sfConfig::get('app_active_days')));
		$this->save();

		return true;
	}

	public function isExpired()
	{
	  return $this->getDaysBeforeExpires() < 0;
	}
	 
	public function expiresSoon()
	{
	  return $this->getDaysBeforeExpires() < 5;
	}
	 
	public function getDaysBeforeExpires()
	{
	  return ceil(($this->getDateTimeObject('expires_at')->format('U') - time()) / 86400);
	}

	public function getCategoryName()
	{
		$c = Doctrine_Core::getTable('JobeetCategory')->find($this->getCategoryId());
		return $c->getName();
	}

	public function asArray($host)
	{
	    return array(
	      'category'     => $this->getCategoryName(),
	      'type'         => $this->getType(),
	      'company'      => $this->getCompany(),
	      'logo'         => $this->getLogo() ? 'http://'.$host.'/uploads/jobs/'.$this->getLogo() : null,
	      'url'          => $this->getUrl(),
	      'position'     => $this->getPosition(),
	      'location'     => $this->getLocation(),
	      'description'  => $this->getDescription(),
	      'how_to_apply' => $this->getHowToApply(),
	      'expires_at'   => $this->getCreatedAt(),
	    );
	}

	/**
	 * Return the url for wsdl with data of people living in particular city/state
	 * @return string
	 */
	private function getUrlForDeFactoSF1Wsdl()
    {
        return sfConfig::get('app_wsdl_defactosf1_url');
    }

    private function getDefactoSF1Key()
    {
    	return sfConfig::get('app_defactosf1_key');
    }

	/**
	 * Return object with state and city
	 * @param  string $location 
	 * @return stdClass          
	 */
	protected function splitLocation($location)
	{
		$loc = explode(',', $location);
		$obj = new stdClass();
		$obj->city = trim($loc[0]);
		$obj->state = trim($loc[1]);
		return $obj;
	}

	/**
	 * Retrives information about the amount of people living in city/state
	 * @return [type]       [description]
	 */
	public function getPeopleLiving()
	{
		$method = 'DeFactoSF1Part1ByNameState';
		$location = $this->splitLocation($this->getLocation());
	    $results = null;

	    $results = sfJobeetSoapApi::request($this->getUrlForDeFactoSF1Wsdl(), $method, array(
	    	'place'	=> $location->city,
	    	'state' => $location->state,
	    	'key' => $this->getDefactoSF1Key()
	    ));

	    $response = $results['DeFactoSF1Part1ByNameStateResult']['Total'];

	    if ( !$response || $response == '') {
	    	$response = 'Not Found';
	    } else {
	    	$response = $results['DeFactoSF1Part1ByNameStateResult']['Total'];
	    }

    	return $response;
	}

	public function __toString()
	{
		return sprintf('%s at %s (%s)', $this->getPosition(), $this->getCompany(), $this->getLocation());
	}
}